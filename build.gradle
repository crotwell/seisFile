

plugins {
  id "edu.sc.seis.version-class" version "1.1.1"
  id "java-library"
  id "maven-publish"
//  id "de.marcphilipp.nexus-publish" version "0.4.0"
  id "signing"
}
apply plugin: 'eclipse'
apply plugin: 'project-report'
apply plugin: 'groovy'

group = 'edu.sc.seis'
version = '1.8.7-SNAPSHOT'

ext.isReleaseVersion = ! ( version.contains("SNAPSHOT") || version.contains("alpha"))

sourceCompatibility = 1.8
targetCompatibility = 1.8

java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    publications {
        myLibrary(MavenPublication) {
            from components.java

          pom {
            name = "seisFile"
            description = 'A library for reading and writing seismic file formats in java.'
            url = 'http://www.seis.sc.edu/seisFile.html'

            scm {
              connection = 'scm:git:https://github.com/crotwell/seisFile.git'
              developerConnection = 'scm:git:https://github.com/crotwell/seisFile.git'
              url = 'https://github.com/crotwell/seisFile'
            }

            licenses {
              license {
                name = 'The GNU General Public License, Version 3'
                url = 'http://www.gnu.org/licenses/gpl-3.0.html'
              }
            }

            developers {
              developer {
                id = 'crotwell'
                name = 'Philip Crotwell'
                email = 'crotwell@seis.sc.edu'
              }
            }
          }
        }
    }

    repositories {
        maven {
            name = 'myRepo'
            url = "file://${buildDir}/repo"
        }
        maven {
            def releaseRepo = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = isReleaseVersion ? releaseRepo : snapshotRepo
            credentials {
                username = project.hasProperty('ossrhUsername') ? ossrhUsername : "Unknown user"
                password = project.hasProperty('ossrhPassword') ? ossrhPassword : "Unknown password"
            }
        }
    }
}


signing {
    sign publishing.publications
}
tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}


configurations {
    intTestImplementation.extendsFrom implementation
    intTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
//    compile project(':seedCodec')
    compile "edu.sc.seis:seedCodec:1.0.11"
    compile "com.martiansoftware:jsap:2.1"
    compile "org.slf4j:slf4j-api:1.7.30"
    compile group: "org.slf4j", name: "slf4j-log4j12", version: "1.7.30"
//
//    compile 'org.rxtx:rxtx:2.2.pre2'  ...but not in maven
    compile 'org.rxtx:rxtx:2.1.7'
    compile "com.fasterxml.woodstox:woodstox-core:5.2.1"
    compile "net.java.dev.msv:msv-core:2013.6.1"
    compile 'org.apache.httpcomponents:httpclient:4.5.12'
    runtime "mysql:mysql-connector-java:5.1.47"
    testCompile group: 'junit', name: 'junit', version: '4.13'

    intTestImplementation group: 'junit', name: 'junit', version: '4.13'
}

repositories {
    mavenLocal()
    maven { url "http://www.seis.sc.edu/software/maven2" }
    mavenCentral()
    maven { url "http://spring-rich-c.sourceforge.net/maven2repository" }
    maven { url "http://oss.sonatype.org/content/groups/public" }
    maven { url "https://repository.jboss.org/nexus/content/repositories/public" }
}

sourceSets {
   example {
      java {
         compileClasspath += main.output
         compileClasspath += main.compileClasspath
         runtimeClasspath += main.output
         runtimeClasspath += main.runtimeClasspath
      }
   }
   metacode {
      groovy {
         srcDir 'src/metacode/groovy'
      }
   }
   intTest {
       compileClasspath += sourceSets.main.output
       runtimeClasspath += sourceSets.main.output
   }
}

def binDistFiles = copySpec {
    from(configurations.default) {
        into('lib')
    }
    from(configurations.default.allArtifacts.files) {
        into('lib')
    }
    from('build/scripts') {
        fileMode=0755
        include('bin/**')
        include('bat/**')
    }
}

def distFiles = copySpec {
    with(binDistFiles)
    from('build/docs') {
        include('javadoc/**')
    }
    from('build') {
        include('build.gradle')
        include('settings.gradle')
    }
    from('.') {
        include('gpl-3.0.txt')
        include('doc/**')
        include('src/**')
        include('gradle/**')
        include('gradlew')
        include('gradlew.bat')
        exclude('**/*.svn')
    }
    from('.') {
        fileMode=0755
        include('gradlew')
    }
    from('../seiswww/build/site') {
        include('seisFile.html')
    }
    from('build/generated-src/modVersion') {
        include('java/**')
        into('src/main')
    }
}


task explodeBin(type: Sync, dependsOn: ['makeScript', 'exampleClasses' ]) {
    group = 'dist'
    with binDistFiles
    into file("$buildDir/explode")
}

//task explodeDist(type: Sync, dependsOn: ['explodeBin', 'javadoc', 'modVersionClass', 'createBuildScript', ':seiswww:makeSite']) {
task explodeDist(type: Sync, dependsOn: ['explodeBin', 'javadoc']) {
    group = 'dist'
    with distFiles
    into file("$buildDir/explode")
}

task tarBin(type: Tar, dependsOn: ['explodeBin' ]) {
    def dirName = project.name+'-'+version+'-bin'
    compression = Compression.GZIP
    into(dirName) {
        with binDistFiles
    }
}

task tarDist(type: Tar, dependsOn: ['explodeDist' ]) {
    def dirName = project.name+'-'+version
    compression = Compression.GZIP
    into(dirName) {
        with distFiles
    }
}

task exampleJar(type: Jar, dependsOn: ['exampleClasses' ]) {
    from sourceSets.example.output
    baseName = 'seisFileExample'
}
explodeBin.dependsOn(exampleJar)
artifacts {
    exampleJar
}


task makeScript() {
  doLast {
    group = 'build'
    def dExtras = getDExtras()
    def doBat = true
    ScriptBuilder.create('fdsnevent', 'edu.sc.seis.seisFile.fdsnws.EventClient', project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('fdsnstationxml', 'edu.sc.seis.seisFile.fdsnws.stationxml.FDSNStationXML', project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('fdsnstation', 'edu.sc.seis.seisFile.fdsnws.StationClient', project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('fdsndataselect', 'edu.sc.seis.seisFile.fdsnws.DataSelectClient', project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('saclh', 'edu.sc.seis.seisFile.sac.ListHeader', project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('mseedlh', 'edu.sc.seis.seisFile.mseed.ListHeader', project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('seedlinkclient', 'edu.sc.seis.seisFile.seedlink.Client', project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('cwbclient', 'edu.sc.seis.seisFile.usgsCWB.Client', project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('lissclient', 'edu.sc.seis.seisFile.liss.Client', project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('winstonclient', 'edu.sc.seis.seisFile.winston.WinstonClient', project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('winstonexport', 'edu.sc.seis.seisFile.winston.WinstonExport', project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('earthwormExportTest', 'edu.sc.seis.seisFile.earthworm.EarthwormExport', project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('earthwormImportTest', 'edu.sc.seis.seisFile.earthworm.EarthwormImport', project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('waveserverclient', 'edu.sc.seis.seisFile.waveserver.WaveServerClient', project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('syncfilecompare', 'edu.sc.seis.seisFile.syncFile.SyncFileCompare', project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('syncfile2gmt', 'edu.sc.seis.seisFile.syncFile.GMTSyncFile', project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('refinesyncfile', 'edu.sc.seis.seisFile.syncFile.RefineSyncFile', project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('gcfserialtoew', 'edu.sc.seis.seisFile.gcf.GCFEarthwormExport', project, dExtras:dExtras, bat:doBat)
    //ScriptBuilder.create('fakegcfserial', 'edu.sc.seis.seisFile.gcf.GCFSerialOutput', project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('sfgroovy', 'groovy.lang.GroovyShell', project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('winstonpurge', 'edu.sc.seis.seisFile.winston.PurgeOldData', project, dExtras:dExtras, bat:doBat)

    }
}

def getDExtras() {
    return [ 'seisFile':getVersion()]
}

test {
    useJUnit {
    }
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
    shouldRunAfter test
}

check.dependsOn integrationTest
