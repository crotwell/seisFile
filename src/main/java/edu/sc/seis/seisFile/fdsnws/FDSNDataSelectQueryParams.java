
package edu.sc.seis.seisFile.fdsnws;

import java.util.Date;

import edu.sc.seis.seisFile.ChannelTimeWindow;

/** Autogenerated by groovy FDSNQueryParamGenerator.groovy in src/metacode/groovy
 */
public class FDSNDataSelectQueryParams extends AbstractQueryParams implements Cloneable {

    public FDSNDataSelectQueryParams() {
        this(IRIS_HOST);
    }
    
    public FDSNDataSelectQueryParams(String host) {
        super(host==null?IRIS_HOST:host);
    }

    public FDSNDataSelectQueryParams clone() {
        FDSNDataSelectQueryParams out = new FDSNDataSelectQueryParams(getHost());
        for (String key : params.keySet()) {
            out.setParam(key, params.get(key));
        }
        return out;
    }

    public FDSNDataSelectQueryParams setHost(String host) {
        this.host = host;
        return this;
    }


    public static final String STARTTIME = "starttime";

    /** Limit results to time series samples on or after the specified start time
     */
    public FDSNDataSelectQueryParams setStartTime(Date value) {
        setParam(STARTTIME, value);
        return this;
    }

    public FDSNDataSelectQueryParams clearStartTime() {
        clearParam(STARTTIME);
        return this;
    }


    public static final String ENDTIME = "endtime";

    /** Limit results to time series samples on or before the specified end time
     */
    public FDSNDataSelectQueryParams setEndTime(Date value) {
        setParam(ENDTIME, value);
        return this;
    }

    public FDSNDataSelectQueryParams clearEndTime() {
        clearParam(ENDTIME);
        return this;
    }


    public static final String NETWORK = "network";

    /** Select one or more network codes. Can be SEED network codes or data center defined codes. Multiple codes are comma-separated.
     */
    public FDSNDataSelectQueryParams appendToNetwork(String value) {
        appendToParam(NETWORK, value);
        return this;
    }

    public FDSNDataSelectQueryParams clearNetwork() {
        clearParam(NETWORK);
        return this;
    }


    public static final String STATION = "station";

    /** Select one or more SEED station codes. Multiple codes are comma-separated.
     */
    public FDSNDataSelectQueryParams appendToStation(String value) {
        appendToParam(STATION, value);
        return this;
    }

    public FDSNDataSelectQueryParams clearStation() {
        clearParam(STATION);
        return this;
    }


    public static final String LOCATION = "location";

    /** Select one or more SEED location identifiers. Multiple identifiers are comma-separated. As a special case "--" (two dashes) will be translated to a string of two space characters to match blank location IDs.
     */
    public FDSNDataSelectQueryParams appendToLocation(String value) {
        if ("  ".equals(value)) { value = "--";}
        appendToParam(LOCATION, value);
        return this;
    }

    public FDSNDataSelectQueryParams clearLocation() {
        clearParam(LOCATION);
        return this;
    }


    public static final String CHANNEL = "channel";

    /** Select one or more SEED channel codes. Multiple codes are comma-separated.
     */
    public FDSNDataSelectQueryParams appendToChannel(String value) {
        appendToParam(CHANNEL, value);
        return this;
    }

    public FDSNDataSelectQueryParams clearChannel() {
        clearParam(CHANNEL);
        return this;
    }


    public static final String QUALITY = "quality";

    /** Select a specific SEED quality indicator, handling is data center dependent.
     */
    public FDSNDataSelectQueryParams setQuality(String value) {
        setParam(QUALITY, value);
        return this;
    }

    public FDSNDataSelectQueryParams clearQuality() {
        clearParam(QUALITY);
        return this;
    }


    public static final String MINIMUMLENGTH = "minimumlength";

    /** Limit results to continuous data segments of a minimum length specified in seconds.
     */
    public FDSNDataSelectQueryParams setMinimumLength(int value) {
        setParam(MINIMUMLENGTH, value);
        return this;
    }

    public FDSNDataSelectQueryParams clearMinimumLength() {
        clearParam(MINIMUMLENGTH);
        return this;
    }


    public static final String LONGESTONLY = "longestonly";

    /** Limit results to the longest continuous segment per channel.
     */
    public FDSNDataSelectQueryParams setLongestOnly(boolean value) {
        setParam(LONGESTONLY, value);
        return this;
    }

    public FDSNDataSelectQueryParams clearLongestOnly() {
        clearParam(LONGESTONLY);
        return this;
    }


    

    public String formPostString() {
        java.util.List<ChannelTimeWindow> request = new java.util.ArrayList<ChannelTimeWindow>();
        String[] netSplit = getParam(NETWORK).split(",");
        String[] staSplit = getParam(STATION).split(",");
        String[] locSplit = getParam(LOCATION).split(",");
        String[] chanSplit = getParam(CHANNEL).split(",");
        java.text.SimpleDateFormat sdf = createDateFormat();
        try {
            Date beginDate = sdf.parse(getParam(STARTTIME));
            Date endDate = sdf.parse(getParam(ENDTIME));
            for (int n = 0; n < netSplit.length; n++) {
                for (int s = 0; s < staSplit.length; s++) {
                    for (int l = 0; l < locSplit.length; l++) {
                        for (int c = 0; c < chanSplit.length; c++) {
                            request.add(new ChannelTimeWindow(netSplit[n],
                                                              staSplit[s],
                                                              locSplit[l],
                                                              chanSplit[c],
                                                              beginDate,
                                                              endDate));
                        }
                    }
                }
            }
        } catch(java.text.ParseException e) {
            // should not happen as we are parsing Dates that we previously
            // formatted with
            // the same SimpleDateFormat
            throw new RuntimeException("Problem parsing date", e);
        }
        return formPostString(request);
    }

    /**
     * Forms the text for use in a POST request to the web service. Channel and
     * time window are taken from the list of ChannelTimeWindow.
     * 
     * @return
     */
    public String formPostString(java.util.List<ChannelTimeWindow> request) {
        StringBuffer out = new StringBuffer();
        if (getParam(QUALITY) != null) {
            out.append(QUALITY + "=" + getParam(QUALITY) + "\n");
        }
        if (getParam(MINIMUMLENGTH) != null) {
            out.append(MINIMUMLENGTH + "=" + getParam(MINIMUMLENGTH) + "\n");
        }
        if (getParam(LONGESTONLY) != null) {
            out.append(LONGESTONLY + "=" + getParam(LONGESTONLY) + "\n");
        }
        String SEP = " ";
        for (ChannelTimeWindow ctw : request) {
            out.append(ctw.formString(SEP, createDateFormat(), true)+"\n");
        }
        return out.toString();
    }

    @Override
    public String getServiceName() {
        return DATASELECT_SERVICE;
    }

    public static final String DATASELECT_SERVICE = "dataselect";



}

